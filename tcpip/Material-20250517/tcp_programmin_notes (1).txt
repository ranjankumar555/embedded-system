 
   socket() : it is useful for creating socket file.
   bind(): useful for binding socket with port number and ip address
   listen() :useful for informing kernel ,if server is busy then how many pending connections can grow.
   accept(): useful for accepting the client connection.
   read() : useful for reading data from socket
   write() : useful for writing data into socket
   close():  useful for closing the connection


    connect(): useful for connecting the socket/connecting to server.

socket:
--------
       #include <sys/types.h>         
       #include <sys/socket.h>
       int socket(int domain, int type, int protocol);

         On  success,  a  file  descriptor  for the new socket is returned.  On
       error, -1 is returned, and errno is set appropriately.

bind:
-----
        #include <sys/types.h>          /* See NOTES */
       #include <sys/socket.h>

       int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

DESCRIPTION
       When  a  socket  is  created with socket(2), it exists in a name space  (address family)
       but has no address assigned to  it.   bind()  assign  the  address  specified  by addr to 
      the socket referred to by the file descriptor sockfd.  addrlen specifies  the  size.
        On success, zero is returned.  On error, -1 is returned


   this structure is generic structure.
           struct sockaddr {
               sa_family_t sa_family;
               char        sa_data[14];
           }
 but whenever we are using ipv4 protocol then specific structure we need to use.
 [ see man 7 ip ]
        #include <sys/socket.h>
       #include <netinet/in.h>
       #include <netinet/ip.h> /* superset of previous */
       
   struct sockaddr_in {
               sa_family_t    sin_family; /* address family: AF_INET */
               in_port_t      sin_port;   /* port in network byte order */
               struct in_addr sin_addr;   /* internet address */
           };

           /* Internet address. */
           struct in_addr {
               uint32_t       s_addr;     /* address in network byte order */
           };
htons: [man htons ] 
---------- 
    uint16_t htons(uint16_t hostshort);
   The  htons()  function  converts  the unsigned short integer hostshort from host byte order 
     to network byte order.
 
inet_addr  [ man inet_addr] 
-----------
in_addr_t inet_addr(const char *cp);

 The inet_addr() function converts the Internet host  address  cp  from  
  IPv4 numbers-and-dots notation into binary data in network byte order.

in interet ,it follows big enidian format

listen()
---------
   int listen(int sockfd, int backlog);

   On  success, zero is returned.  On error, -1 is returned,

  Active and passive sockets
  ---------------------------------

          By default, a socket that has been created using socket() is active. 
   An active socket can be used in a connect() call to establish a connection to
  a passive socket. This is referred to as performing an active open.
          
          A passive socket (also called a listening socket) is one that has been
  marked to allow incoming connections by calling listen(). Accepting an incoming
  connection is referred to as performing a passive open.



accept:
-----------

	#include <sys/types.h>          /* See NOTES */
       	#include <sys/socket.h>

	       int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

     The  accept()  system call is used with connection-based socket types (SOCK_STREAM, 
    SOCK_SEQPACKET).   It  extracts  the  first  connection  request on the queue of pending
    connections for the listening socket,
 

    On success, these system calls return a nonnegative integer that is a   file descriptor for
      the accepted socket.  On error, -1  is  returned,

connect:
--------------

 #include <sys/types.h>          /* See NOTES */
       #include <sys/socket.h>

       int connect(int sockfd, const struct sockaddr *addr,  socklen_t addrlen);
    
       If the connection or binding succeeds, zero is returned.   On  error,  -1 is returned,


inet_ntoa:
-----------
char *inet_ntoa(struct in_addr in);
The  inet_ntoa() function converts the Internet host address in, given  in network byte order, 
 to a string in  IPv4  dotted-decimal  notation.




servers can implement in 2 ways
  1.iterative server: it can hanq a time.
  2.concurrent server: it can handle multiple clients at a time.


