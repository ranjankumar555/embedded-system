## Feature of String class
------------------------------------------------------
1. String s1;
2. String s1("Ranjan Kumar");
3. String s1 = "Ranjan Kumar";
4. String s2 = s1;
5. s[0] = 'y'; 
6. String s4; cin>>s4; cout<<s4<<endl; [Tricky]
7. 
8. Comparison operators (==, !=, <, <=, >, >=) 
9. Supports all kinds of strings concatenation (String s = "Hello" + s2 + " Again" + '!';)
10. Support iterator concepts(v.begin(), v.end());
11. Support stream operator (<<) // cout<<s1<<endl;
12. Length synchronization support for each object.
13. Dynamically manage memory
14. Move constructor & move assignment operator (used when returning, returning require transferring the ownership, rather than copy)


## Member function
---------------------------------------------------------
String();
String(const char* p);
String(String& t);
String(String&& other);  // Move constructor
void getstr(void);
int len(void);
char* begin(void);
char* end(void);

/*** operator overloaded member function ***/
String& operator =(String& s2);
String& operator =(const char* ptr);
String& operator=(String&& other); // Move assignment(=) operator
String operator +(String&);
String& operator +=(String&);
char& operator [](int i);
bool operator >(String s2);
bool operator <(String s2);
bool operator >=(String s2);
bool operator <=(String s2);
bool operator !=(String s2);
bool operator ==(String s2);


##Friend function
-----------------------------------------------------------
friend ostream& operator <<(ostream& out, String& obj);
friend istream& operator >>(istream& in, String& obj);

friend unsigned int my_strlen(String& s);
friend void my_strcpy(String& s1, String& s2);
friend void my_strncpy(String& dest, const String& src, unsigned const int len);
friend int my_strcmp(const String& s1, const String& s2);
friend void my_strcat(String& s1, const String& s2);
friend void my_strncat(String& s1, const String& s2, unsigned const int len);
friend String& my_strrev1(String& str);
friend void my_strrev2(String& startAddr, String& endAddr);
friend String& my_strupper(String& str);
friend String& my_strlower(String& str);
friend bool my_strchr(String& str, char ch);
friend bool my_strrchr(String& str, char ch);
friend bool my_strstr(const String& mainstr, const String& substr); 


## More implementation detail 
[String Concatenation: total 8 cases possible ]
----------------------------------------------------------------------------  
| Syntax              | Function Signature                                  |
| ------------------- | --------------------------------------------------- |
| s1 + s2             | String operator+(const String&) const               |implemented
| s1 += s2            | String& operator+=(const String&)                   |implemented
| s1 + "abc"          | String operator+(const char*) const                 |implemented
| "abc" + s1          | friend String operator+(const char*, const String&) |implemented
| s1 += "abc"         | String& operator+=(const char*)                     |implemented
| s1 + 'a'            | String operator+(char) const                        |implemented
| 'a' + s1            | String operator+(char) const                        |implemented
| s1 += 'a'           | String& operator+=(char)                            |implemented
----------------------------------------------------------------------------
Note: s1 += 'a' is possible but its reverse('a' += s1) not possible, b/c 'a' is not valid m/r location.

String operator+(String& obj, const char* ptr){
    obj.length = obj.length + mystrlen(ptr);
    String temp;
    temp.str = new char[obj.length + 1];
    temp.length = obj.length;
    int i=0, j= 0;
    while(obj.str[i]){
        temp.str[i] = obj.str[i];
        i++;
    }
    while(ptr[j]){
        temp.str[i++] = ptr[j++];
    }
    temp.str[i]= '\0';
    
    return temp;
}
String operator+=(String& obj, const char* ptr){
    obj.length = obj.length + mystrlen(ptr);
    String temp;
    temp.str = new char[obj.length + 1];
    temp.length = obj.length;
    int i=0, j= 0;
    while(obj.str[i]){
        temp.str[i] = obj.str[i];
        i++;
    }
    while(ptr[j]){
        temp.str[i++] = ptr[j++];
    }
    temp.str[i]= '\0';
    delete[] obj.str;
    obj = temp;      
}
String operator+(const char* ptr, String& obj){
    String temp;
    temp.length = obj.length + mystrlen(ptr);
    temp.str = new char[obj.length + 1];
    
    int i=0, j= 0;
    
    while(ptr[i]){
        temp.str[i] = ptr[i];
        i++;
    }
    while(obj.str[j]){
        temp.str[i++] = obj.str[j++];
    }
    temp.str[i]= '\0';
    
    return temp;    
}
String operator+(String& obj, const char ch){
   String temp;
   temp.length = obj.length + 1;
   temp.str = new char[temp.length + 1];
   int i = 0;
   while(obj.str[i]){
       temp.str[i] = obj.str[i];
       i++;
   }
   temp.str[i++] = ch;
   temp.str[i] = '\0';
   
   return temp;
    
}
String operator+=(String& obj, const char ch){
    String temp;
   temp.length = obj.length + 1;
   temp.str = new char[temp.length + 1];
   int i = 0;
   while(obj.str[i]){
       temp.str[i] = obj.str[i];
       i++;
   }
   temp.str[i++] = ch;
   temp.str[i] = '\0';
   delete[] obj.str;
   obj.str = temp.str;
   return temp;    
}
String operator+(const char ch, String& obj){
   String temp;
   temp.length = obj.length + 1;
   temp.str = new char[temp.length + 1];
   int i = 0, j=0;
   temp.str[i++] = ch;
   while(obj.str[j]){
       temp.str[i++] = obj.str[j++];
   }
   
   temp.str[i] = '\0';
   
   return temp;    
}

 
Performed Testcases:
------------------------------------------------------------------------
/*** main function ***/
int main(){
	
// 	String s1("vector india");
// 	s1[0] = 's';
// 	s1.getstr();	
	cout<<s1.len()<<endl;

	String s2 = "bangalore";
	s2.getstr();
	cout<<s2.len()<<endl;
	
// 	String s3;
// 	s3 = s1 + s2;
// 	s3.getstr();
// 	cout<<s3.len()<<endl;
	
// 	for(int i = 0; i<s3.len(); i++){
// 		cout<<s3[i]<<" ";
// 	}
// 	cout<<endl;

// 	String s4, s5;
// 	cout<<"enter s4 and s5"<<endl;
// 	cin>>s4>>s5;
// 	cout<<"S4:"<<s4<<endl; 
// 	cout<<"s4 len = "<<s4.len()<<endl;
// 	s5.getstr();
// 	cout<<"s5 len = "<<s5.len()<<endl;
	
	String s6 = s2 + " in karnataka";
	s6.getstr();
	cout<<"s6 len: "<<s6.len()<<endl;
	
	String s7 = "in karnataka " + s2;
	s7.getstr();
	cout<<"s7 len: "<<s7.len()<<endl;
	
	String s8 = 'm' + s2;
	s8.getstr();
	cout<<"s8 len: "<<s8.len()<<endl;
	
	String s9 = s2 + 'y';
	s9.getstr();
	cout<<"s9 len: "<<s9.len()<<endl;

	return 0;
}
