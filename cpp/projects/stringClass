## Feature of String class
------------------------------------------------------
1. String s1;
2. String s1("Ranjan Kumar");
3. String s1 = "Ranjan Kumar";
4. String s2 = s1;
5. s[0] = 'y'; 
6. String s4; cin>>s4; cout<<s4<<endl; [Tricky]
7. 
8. Comparison operators (==, !=, <, <=, >, >=) 
9. Supports all kinds of strings concatenation (String s = "Hello" + s2 + " Again" + '!';)
10. Support iterator concepts(v.begin(), v.end());
11. Support stream operator (<<) // cout<<s1<<endl;
12. Length synchronization support for each object.
13. Dynamically manage memory
14. Move constructor & move assignment operator (used when returning, returning require transferring the ownership, rather than copy)


## Member function
---------------------------------------------------------
/*** Constructor ***/
String();		// default
String(const char* p);	// parameterised
String(String&& other); // move 
String(String& t);	// deep copy
~string();

/*** member function ***/
void getstr(void);
int len(void);
char* begin(void);
char* end(void);	
	/*** operator overloaded member function ***/
String& operator=(String& s2);
String& operator=(const char* ptr);
String& operator=(String&& other);  // Move assignment

String operator +(String&);
String& operator +=(String&);
String operator+(const char* ); // def s1 + "abc"
String& operator +=(const char*);
String operator+(const char );  // def s1 + 'a'
String& operator +=(const char ch);
	
char& operator [](int i);
bool operator >(String& s2);
bool operator <(String& s2);
bool operator >=(String& s2);
bool operator <=(String& s2);
bool operator !=(String& s2);
bool operator ==(String& s2);

##Friend function
-----------------------------------------------------------
friend ostream& operator <<(ostream& out, String& obj);
friend istream& operator >>(istream& in, String& obj);

friend String operator+(const char* ptr, String& obj);
friend String operator+(const char ch, String& obj);
/*** friend function ***/
friend unsigned int my_strlen(String& s);
friend void my_strcpy(String& s1, String& s2);
friend void my_strncpy(String& dest, const String& src, unsigned const int len);
friend int my_strcmp(const String& s1, const String& s2);
friend void my_strcat(String& s1, const String& s2);
friend void my_strncat(String& s1, const String& s2, unsigned const int len);
friend String& my_strrev1(String& str);
friend void my_strrev2(String& startAddr, String& endAddr);
friend String& my_strupper(String& str);
friend String& my_strlower(String& str);
friend bool my_strchr(String& str, char ch);
friend bool my_strrchr(String& str, char ch);
friend bool my_strstr(const String& mainstr, const String& substr); 


## More implementation detail 
[String Concatenation: total 8 cases possible ]
-----------------------------------------------------------------------------  
| Syntax              | Implemented through member/friend   |  Status       |
| ------------------- | ------------------------------------|----------------
| s1 + s2             | member function               	    |implemented    |
| s1 += s2            | member function                     |implemented    |
| s1 + "abc"          | member function                     |implemented    |
| "abc" + s1          | friend function                     |implemented    |
| s1 += "abc"         | member function                     |implemented    |
| s1 + 'a'            | member function                     |implemented    |
| 'a' + s1            | friend function                     |implemented    |
| s1 += 'a'           | member function                     |implemented    |
-----------------------------------------------------------------------------
Note: s1 += 'a' is possible but its reverse('a' += s1) not possible, b/c 'a' is not valid m/r location.
 

Performed Testcases:
------------------------------------------------------------------------
/*** main.cpp ***/
int main() {

	String s1("vector india");
	s1[0] = 's';
	cout << "s1 = ";
	s1.getstr();
	
	cout<<"-------------------------------------------"<<endl;
	String s2 = "bangalore";
	cout<<"s2  = "<<s2<<endl;
	cout << "Length of s2 = " << s2.len() << endl;

	// Concatenation: Case 1
	cout<<"-------------------------------------------"<<endl;
	String s3;
	s3 = s1 + s2;
	cout<<"s1 = "<<s1<<", s2 = "<<s2<<endl;
	cout << "s3 = s1+s2 => ";
	s3.getstr();

	// Case 2
	cout<<"-------------------------------------------"<<endl;
	cout<<"s3 = "<<s3<<", s1 = "<<s1<<endl; 
	s3 += s1;
	cout << "s3 += s1 => " << s3 << endl;

	// Case 3
	cout<<"-------------------------------------------"<<endl;
	cout << "s1 = " << s1 << endl;
	s3 = s1 + "vector";
	cout<<" s3 = s1 + \"vector\" => "<<s3<<endl;

	// Case 4:
	cout<<"-------------------------------------------"<<endl;
	cout<<"s1 = "<<s1<<endl;
	s3 = "vector" + s1;
	cout << "s3 = \"vector\" + s1 => " << s3 << endl;

	// Case 5
	cout<<"-------------------------------------------"<<endl;
	cout<<"s3 = "<<s3<<endl;
	cout << "s3 += \"Vector\" => ";
	s3 += "Vector";
	cout <<s3 << endl;

	// Case 6
	cout<<"-------------------------------------------"<<endl;
	cout<<"s1 = "<<s1<<endl;
	s3 = s1 + 'x';
	cout << "s3 = s1 + 'x' => " << s3 << endl;

	// Case 7
	cout<<"-------------------------------------------"<<endl;
	cout<<"s1 = "<<s1<<endl;
	s3 = 'x' + s1;
	cout << "'x' + s1 = " << s3 << endl;

	// Case 8
	cout<<"-------------------------------------------"<<endl;
	cout<<"s3 = "<<s3<<endl;
	s3 += 'x';
	cout << "s3 += 'x' = " << s3 << endl;
	cout << "Length of s3 = " << s3.len() << endl;

	// [] and << overload
	cout<<"-------------------------------------------"<<endl;
	cout << "Characters of s3: ";
	for (int i = 0; i < s3.len(); i++) {
		cout << s3[i] << " ";
	}
	cout << endl;
	
	// >> overload and chaining support
	cout<<"-------------------------------------------"<<endl;
	String s4, s5;
	cout << "Enter two strings (s4 and s5): ";
	cin >> s4 >> s5;

	cout << "S4: " << s4 << endl;
	cout << "Length of s4 = " << s4.len() << endl;

	cout<<"-------------------------------------------"<<endl;
	cout << "s5 = ";
	s5.getstr();
	cout << "Length of s5 = " << s5.len() << endl;
	cout<<"--------------------------------------------"<<endl;
	
	// comparison operator
	cout<<"*********** String Comparision *************"<<endl;
	cout<<"--------------------------------------------"<<endl;
	cout<<"s4 = "<<s4<<endl;
	cout<<"s5 = "<<s5<<endl;
	cout<<"s4 >  s5 => "<< (s4>s5) << endl;
	cout<<"s4 >= s5 => "<< (s4>=s5) << endl;
	cout<<"s4 <  s5 => "<< (s4<s5) << endl;
	cout<<"s4 <= s5 => "<< (s4<=s5) << endl;
	cout<<"s4 == s5 => "<< (s4==s5) << endl;
	cout<<"s4 != s5 => "<< (s4!=s5) << endl;
	cout<<"--------------------------------------------"<<endl;

	return 0;
}
